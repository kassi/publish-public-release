name: Publish Public Release
description: Publishes to a secondary, public repository
inputs:
  repository:
    description: Public repository name with owner.
    required: true
  token:
    description: Personal access token (PAT) used to fetch the repository.
    required: true
  deploy_key:
    description: SSH Deploy key to update the public repository.
    required: true
  committer_email:
    description: |
      Email used when committing changes to public repository.
      Required, when `commit_files` is not empty.
    required: false
  committer_name:
    description: |
      Name used when committing changes to public repository.
      Required, when `commit_files` is not empty.
    required: false
  copy_changelog:
    description: Specifies whether CHANGELOG should be copied to the public repository. Set to 'true' or 'false'.
    required: false
    default: true
  copy_readme:
    description: Specifies whether README.md should be copied to the public repository. Set to 'true' or 'false'.
    required: false
    default: true
  truncate_readme_regex:
    description: Regular expression where the README.md file is being truncated.
    required: false

  files:
    description: List of files to upload as release assets.
    required: false

  release_body_from_changelog:
    description: |
      When `true`, uses the changelog as release body.
      In this case, copy_changelog must also be seit to a valid changelog file which follows standard convention,
      i.e. start a release section with
          ## <release-number>
    required: false
  name:
    description: Gives the release a custom name. Defaults to tag name
    required: false
  tag_name:
    description: Gives a tag name. Defaults to github.GITHUB_REF
    required: false
    default: ${{ github.ref_name }}
  draft:
    description: Creates a draft release. Defaults to false
    required: false
  prerelease:
    description: Identify the release as a prerelease. Defaults to false
    required: false
  make_latest:
    description: Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Can be `true`, `false`, or `legacy`. Uses GitHub api default if not provided
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up SSH deploy key
      shell: bash
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ inputs.deploy_key }}"

    - name: Clone and set up public repository
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        rm -rf /tmp/publish-public-release
        gh repo clone git@github.com:${{ inputs.repository }}.git /tmp/publish-public-release
        git -C /tmp/publish-public-release branch -M main
        git -C /tmp/publish-public-release config --global user.email "${{ inputs.committer_email }}"
        git -C /tmp/publish-public-release config --global user.name "${{ inputs.committer_name }}"

    - name: Copy CHANGELOG
      if: ${{ inputs.copy_changelog != 'false' }}
      shell: bash
      run: |
        cp ${{ inputs.copy_changelog }} /tmp/publish-public-release
        git -C /tmp/publish-public-release add ${{ inputs.copy_changelog }}

    - name: Copy README
      if: ${{ inputs.copy_readme != 'false' && inputs.truncate_readme_regex == '' }}
      shell: bash
      run: |
        cp ${{ inputs.copy_readme }} /tmp/publish-public-release
        git -C /tmp/publish-public-release add ${{ inputs.copy_readme }}
    - name: Update README
      if: ${{ inputs.copy_readme != 'false' && inputs.truncate_readme_regex != '' }}
      shell: bash
      run: |
        cat ${{ inputs.copy_readme }} | sed -e '/${{ inputs.truncate_readme_regex }}/,$d' > /tmp/publish-public-release/${{ inputs.copy_readme }}
        git -C /tmp/publish-public-release add ${{ inputs.copy_readme }}

    - name: Commit changes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        git -C /tmp/publish-public-release commit -m "docs: update for release ${{ inputs.tag_name }}" --allow-empty
        git -C /tmp/publish-public-release tag -f ${{ inputs.tag_name }}
        git -C /tmp/publish-public-release push -u origin main
        git -C /tmp/publish-public-release push -f --tags

        touch /tmp/publish-public-release.body

    - name: Prepare release body
      if: ${{ inputs.release_body_from_changelog == 'true' && inputs.copy_changelog != 'false' }}
      shell: bash
      run: |
        cat ${{ inputs.copy_changelog }} | perl -e "local \$/;<STDIN>=~m/^## \Q${{ inputs.tag_name }}\E .*?\n\n(.*?)\n(^## |\z)/ms && print \$1;" > /tmp/publish-public-release.body

    - name: Create Public Release
      id: create_public_release
      uses: softprops/action-gh-release@v2
      with:
        repository: ${{ inputs.repository }}
        body_path: /tmp/publish-public-release.body
        token: ${{ inputs.token }}
        name: ${{ inputs.name == '' && inputs.tag_name || inputs.name }}
        tag_name: ${{ inputs.tag_name }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ inputs.prerelease }}
        make_latest: ${{ inputs.make_latest }}
        files: ${{ inputs.files }}
